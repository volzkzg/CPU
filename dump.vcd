$date
	Sat Sep 10 01:12:49 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module min_sopc_tb $end
$scope module min_sopc0 $end
$scope module top0 $end
$scope module regfile1 $end
$var reg 32 ! \regs[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module min_sopc_tb $end
$scope module min_sopc0 $end
$scope module top0 $end
$scope module regfile1 $end
$var reg 32 " \regs[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module min_sopc_tb $end
$var reg 1 # CLOCK_50 $end
$var reg 1 $ rst $end
$scope module min_sopc0 $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var wire 1 % rom_ce $end
$var wire 32 & inst_addr [31:0] $end
$var wire 32 ' inst [31:0] $end
$scope module inst_rom0 $end
$var wire 1 % ce $end
$var wire 32 ( addr [31:0] $end
$var reg 32 ) inst [31:0] $end
$upscope $end
$scope module top0 $end
$var wire 1 # clk $end
$var wire 32 * rom_addr_o [31:0] $end
$var wire 32 + rom_data_i [31:0] $end
$var wire 1 $ rst $end
$var wire 1 , wb_wreg_i $end
$var wire 32 - wb_wdata_i [31:0] $end
$var wire 5 . wb_wd_i [4:0] $end
$var wire 1 % rom_ce_o $end
$var wire 1 / reg2_read $end
$var wire 32 0 reg2_data [31:0] $end
$var wire 5 1 reg2_addr [4:0] $end
$var wire 1 2 reg1_read $end
$var wire 32 3 reg1_data [31:0] $end
$var wire 5 4 reg1_addr [4:0] $end
$var wire 32 5 pc [31:0] $end
$var wire 1 6 mem_wreg_o $end
$var wire 1 7 mem_wreg_i $end
$var wire 32 8 mem_wdata_o [31:0] $end
$var wire 32 9 mem_wdata_i [31:0] $end
$var wire 5 : mem_wd_o [4:0] $end
$var wire 5 ; mem_wd_i [4:0] $end
$var wire 1 < id_wreg_o $end
$var wire 5 = id_wd_o [4:0] $end
$var wire 32 > id_reg2_o [31:0] $end
$var wire 32 ? id_reg1_o [31:0] $end
$var wire 32 @ id_pc_i [31:0] $end
$var wire 32 A id_inst_i [31:0] $end
$var wire 3 B id_alusel_o [2:0] $end
$var wire 8 C id_aluop_o [7:0] $end
$var wire 1 D ex_wreg_o $end
$var wire 1 E ex_wreg_i $end
$var wire 32 F ex_wdata_o [31:0] $end
$var wire 5 G ex_wd_o [4:0] $end
$var wire 5 H ex_wd_i [4:0] $end
$var wire 32 I ex_reg2_i [31:0] $end
$var wire 32 J ex_reg1_i [31:0] $end
$var wire 3 K ex_alusel_i [2:0] $end
$var wire 8 L ex_aluop_i [7:0] $end
$scope module ex0 $end
$var wire 1 $ rst $end
$var wire 1 E wreg_i $end
$var wire 5 M wd_i [4:0] $end
$var wire 32 N reg2_i [31:0] $end
$var wire 32 O reg1_i [31:0] $end
$var wire 3 P alusel_i [2:0] $end
$var wire 8 Q aluop_i [7:0] $end
$var reg 32 R logic_result [31:0] $end
$var reg 5 S wd_o [4:0] $end
$var reg 32 T wdata_o [31:0] $end
$var reg 1 D wreg_o $end
$upscope $end
$scope module ex_mem0 $end
$var wire 1 # clk $end
$var wire 5 U ex_wd [4:0] $end
$var wire 32 V ex_wdata [31:0] $end
$var wire 1 D ex_wreg $end
$var wire 1 $ rst $end
$var reg 5 W mem_wd [4:0] $end
$var reg 32 X mem_wdata [31:0] $end
$var reg 1 7 mem_wreg $end
$upscope $end
$scope module id0 $end
$var wire 5 Y ex_wd_i [4:0] $end
$var wire 32 Z ex_wdata_i [31:0] $end
$var wire 1 D ex_wreg_i $end
$var wire 1 $ rst $end
$var wire 32 [ reg2_data_i [31:0] $end
$var wire 32 \ reg1_data_i [31:0] $end
$var wire 32 ] pc_i [31:0] $end
$var wire 5 ^ op4 [4:0] $end
$var wire 6 _ op3 [5:0] $end
$var wire 5 ` op2 [4:0] $end
$var wire 6 a op [5:0] $end
$var wire 1 6 mem_wreg_i $end
$var wire 32 b mem_wdata_i [31:0] $end
$var wire 5 c mem_wd_i [4:0] $end
$var wire 32 d inst_i [31:0] $end
$var reg 8 e aluop_o [7:0] $end
$var reg 3 f alusel_o [2:0] $end
$var reg 32 g imm [31:0] $end
$var reg 1 h instvalid $end
$var reg 5 i reg1_addr_o [4:0] $end
$var reg 32 j reg1_o [31:0] $end
$var reg 1 2 reg1_read_o $end
$var reg 5 k reg2_addr_o [4:0] $end
$var reg 32 l reg2_o [31:0] $end
$var reg 1 / reg2_read_o $end
$var reg 5 m wd_o [4:0] $end
$var reg 1 < wreg_o $end
$upscope $end
$scope module id_ex0 $end
$var wire 1 # clk $end
$var wire 8 n id_aluop [7:0] $end
$var wire 3 o id_alusel [2:0] $end
$var wire 32 p id_reg1 [31:0] $end
$var wire 32 q id_reg2 [31:0] $end
$var wire 5 r id_wd [4:0] $end
$var wire 1 < id_wreg $end
$var wire 1 $ rst $end
$var reg 8 s ex_aluop [7:0] $end
$var reg 3 t ex_alusel [2:0] $end
$var reg 32 u ex_reg1 [31:0] $end
$var reg 32 v ex_reg2 [31:0] $end
$var reg 5 w ex_wd [4:0] $end
$var reg 1 E ex_wreg $end
$upscope $end
$scope module if_id0 $end
$var wire 1 # clk $end
$var wire 32 x if_inst [31:0] $end
$var wire 1 $ rst $end
$var wire 32 y if_pc [31:0] $end
$var reg 32 z id_inst [31:0] $end
$var reg 32 { id_pc [31:0] $end
$upscope $end
$scope module mem0 $end
$var wire 1 $ rst $end
$var wire 5 | wd_i [4:0] $end
$var wire 32 } wdata_i [31:0] $end
$var wire 1 7 wreg_i $end
$var reg 5 ~ wd_o [4:0] $end
$var reg 32 !" wdata_o [31:0] $end
$var reg 1 6 wreg_o $end
$upscope $end
$scope module mem_wb0 $end
$var wire 1 # clk $end
$var wire 5 "" mem_wd [4:0] $end
$var wire 32 #" mem_wdata [31:0] $end
$var wire 1 6 mem_wreg $end
$var wire 1 $ rst $end
$var reg 5 $" wb_wd [4:0] $end
$var reg 32 %" wb_wdata [31:0] $end
$var reg 1 , wb_wreg $end
$upscope $end
$scope module pc_reg0 $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var reg 1 % ce $end
$var reg 32 &" pc [31:0] $end
$upscope $end
$scope module regfile1 $end
$var wire 1 # clk $end
$var wire 5 '" raddr1 [4:0] $end
$var wire 5 (" raddr2 [4:0] $end
$var wire 1 2 re1 $end
$var wire 1 / re2 $end
$var wire 1 $ rst $end
$var wire 5 )" waddr [4:0] $end
$var wire 32 *" wdata [31:0] $end
$var wire 1 , we $end
$var reg 32 +" rdata1 [31:0] $end
$var reg 32 ," rdata2 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 ,"
b0 +"
bx *"
bx )"
b0 ("
b0 '"
bx &"
bx %"
bx $"
b0 #"
b0 ""
b0 !"
b0 ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
1h
b0 g
b0 f
b0 e
bx d
b0 c
b0 b
bx a
bx `
bx _
bx ^
bx ]
b0 \
b0 [
b0 Z
bx Y
bx X
bx W
b0 V
bx U
b0 T
bx S
b0 R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
b0 F
xE
xD
b0 C
b0 B
bx A
bx @
b0 ?
b0 >
b0 =
0<
bx ;
b0 :
bx 9
b0 8
x7
06
bx 5
b0 4
b0 3
02
b0 1
b0 0
0/
bx .
bx -
x,
bx +
bx *
bx )
bx (
bx '
bx &
x%
1$
0#
bx "
bx !
$end
#10000
b0 '
b0 )
b0 +
b0 x
0D
b0 G
b0 S
b0 U
b0 Y
b0 ^
b0 _
b0 `
b0 a
0%
b0 A
b0 d
b0 z
b0 @
b0 ]
b0 {
0E
b0 H
b0 M
b0 w
b0 I
b0 N
b0 v
b0 J
b0 O
b0 u
b0 K
b0 P
b0 t
b0 L
b0 Q
b0 s
b0 9
b0 X
b0 }
07
b0 ;
b0 W
b0 |
b0 -
b0 %"
b0 *"
0,
b0 .
b0 $"
b0 )"
1#
#20000
0#
#30000
b0 &
b0 (
b0 *
b0 5
b0 y
b0 &"
1#
#40000
0#
#50000
1#
#60000
0#
#70000
1#
#80000
0#
#90000
1#
#100000
0#
#110000
1#
#120000
0#
#130000
1#
#140000
0#
#150000
1#
#160000
0#
#170000
1#
#180000
0#
#190000
1#
#195000
0h
0$
#200000
0#
#210000
b110100000000010001000100000000 '
b110100000000010001000100000000 )
b110100000000010001000100000000 +
b110100000000010001000100000000 x
1%
1#
#220000
0#
#230000
b1000100000000 >
b1000100000000 l
b1000100000000 q
1h
b1000100000000 g
12
b1 B
b1 f
b1 o
b100101 C
b100101 e
b100101 n
1<
b1 1
b1 k
b1 ("
b1 =
b1 m
b1 r
b110100001000010000000000100000 '
b110100001000010000000000100000 )
b110100001000010000000000100000 +
b110100001000010000000000100000 x
b1 ^
b100 `
b1101 a
b110100000000010001000100000000 A
b110100000000010001000100000000 d
b110100000000010001000100000000 z
b100 &
b100 (
b100 *
b100 5
b100 y
b100 &"
1#
#240000
0#
#250000
b1000100000000 ?
b1000100000000 j
b1000100000000 p
bx 3
bx \
bx +"
b100000 >
b100000 l
b100000 q
b1000100000000 F
b1000100000000 T
b1000100000000 V
b1000100000000 Z
b110100001000010100010000000000 '
b110100001000010100010000000000 )
b110100001000010100010000000000 +
b110100001000010100010000000000 x
b100000 g
b1 4
b1 i
b1 '"
12
1h
1<
b1 =
b1 m
b1 r
b1 B
b1 f
b1 o
b100101 C
b100101 e
b100101 n
1D
b1 G
b1 S
b1 U
b1 Y
b1000100000000 R
b100000 _
b0 `
b1000 &
b1000 (
b1000 *
b1000 5
b1000 y
b1000 &"
b110100001000010000000000100000 A
b110100001000010000000000100000 d
b110100001000010000000000100000 z
b100 @
b100 ]
b100 {
1E
b1 H
b1 M
b1 w
b1000100000000 I
b1000100000000 N
b1000100000000 v
b1 K
b1 P
b1 t
b100101 L
b100101 Q
b100101 s
1#
#260000
0#
#270000
b1000100100000 ?
b1000100100000 j
b1000100100000 p
b1000100100000 F
b1000100100000 T
b1000100100000 V
b1000100100000 Z
b100010000000000 >
b100010000000000 l
b100010000000000 q
b1000100000000 8
b1000100000000 b
b1000100000000 !"
b1000100000000 #"
16
b1 :
b1 c
b1 ~
b1 ""
b1000100100000 R
b100010000000000 g
12
1h
1<
b1 =
b1 m
b1 r
b1 B
b1 f
b1 o
b100101 C
b100101 e
b100101 n
b110100001000010000000001000100 '
b110100001000010000000001000100 )
b110100001000010000000001000100 +
b110100001000010000000001000100 x
b0 _
b10000 `
b1000100000000 9
b1000100000000 X
b1000100000000 }
17
b1 ;
b1 W
b1 |
b100000 I
b100000 N
b100000 v
b1000100000000 J
b1000100000000 O
b1000100000000 u
b110100001000010100010000000000 A
b110100001000010100010000000000 d
b110100001000010100010000000000 z
b1000 @
b1000 ]
b1000 {
b1100 &
b1100 (
b1100 *
b1100 5
b1100 y
b1100 &"
1#
#280000
0#
#290000
b101010100100000 ?
b101010100100000 j
b101010100100000 p
b101010100100000 F
b101010100100000 T
b101010100100000 V
b101010100100000 Z
b1000100 >
b1000100 l
b1000100 q
bx '
bx )
bx +
bx x
b1000100 g
12
1h
1<
b1 =
b1 m
b1 r
b1 B
b1 f
b1 o
b100101 C
b100101 e
b100101 n
b101010100100000 R
b1000100100000 8
b1000100100000 b
b1000100100000 !"
b1000100100000 #"
b1000100000000 3
b1000100000000 \
b1000100000000 +"
b100 _
b1 `
b10000 &
b10000 (
b10000 *
b10000 5
b10000 y
b10000 &"
b110100001000010000000001000100 A
b110100001000010000000001000100 d
b110100001000010000000001000100 z
b1100 @
b1100 ]
b1100 {
b100010000000000 I
b100010000000000 N
b100010000000000 v
b1000100100000 J
b1000100100000 O
b1000100100000 u
b1000100100000 9
b1000100100000 X
b1000100100000 }
b1000100000000 -
b1000100000000 %"
b1000100000000 *"
1,
b1 .
b1 $"
b1 )"
1#
#300000
0#
#310000
b101010101100100 F
b101010101100100 T
b101010101100100 V
b101010101100100 Z
b0 >
b0 l
b0 q
b0 ?
b0 j
b0 p
b101010100100000 8
b101010100100000 b
b101010100100000 !"
b101010100100000 #"
b101010101100100 R
b0 3
b0 \
b0 +"
b0 g
bx 1
bx k
bx ("
bx 4
bx i
bx '"
02
0h
0<
bx =
bx m
bx r
b0 B
b0 f
b0 o
b0 C
b0 e
b0 n
bx ^
bx _
bx `
bx a
b1000100100000 -
b1000100100000 %"
b1000100100000 *"
b101010100100000 9
b101010100100000 X
b101010100100000 }
b1000100 I
b1000100 N
b1000100 v
b101010100100000 J
b101010100100000 O
b101010100100000 u
b1000100000000 !
bx A
bx d
bx z
b10000 @
b10000 ]
b10000 {
b10100 &
b10100 (
b10100 *
b10100 5
b10100 y
b10100 &"
1#
#320000
0#
#330000
b0 F
b0 T
b0 V
b0 Z
0D
bx G
bx S
bx U
bx Y
b0 R
b101010101100100 8
b101010101100100 b
b101010101100100 !"
b101010101100100 #"
b11000 &
b11000 (
b11000 *
b11000 5
b11000 y
b11000 &"
b10100 @
b10100 ]
b10100 {
b1000100100000 !
0E
bx H
bx M
bx w
b0 I
b0 N
b0 v
b0 J
b0 O
b0 u
b0 K
b0 P
b0 t
b0 L
b0 Q
b0 s
b101010101100100 9
b101010101100100 X
b101010101100100 }
b101010100100000 -
b101010100100000 %"
b101010100100000 *"
1#
#340000
0#
#350000
b0 8
b0 b
b0 !"
b0 #"
06
bx :
bx c
bx ~
bx ""
b101010101100100 -
b101010101100100 %"
b101010101100100 *"
b0 9
b0 X
b0 }
07
bx ;
bx W
bx |
b101010100100000 !
b11000 @
b11000 ]
b11000 {
b11100 &
b11100 (
b11100 *
b11100 5
b11100 y
b11100 &"
1#
#360000
0#
#370000
b100000 &
b100000 (
b100000 *
b100000 5
b100000 y
b100000 &"
b11100 @
b11100 ]
b11100 {
b101010101100100 !
b0 -
b0 %"
b0 *"
0,
bx .
bx $"
bx )"
1#
#380000
0#
#390000
b100000 @
b100000 ]
b100000 {
b100100 &
b100100 (
b100100 *
b100100 5
b100100 y
b100100 &"
1#
#400000
0#
#410000
b101000 &
b101000 (
b101000 *
b101000 5
b101000 y
b101000 &"
b100100 @
b100100 ]
b100100 {
1#
#420000
0#
#430000
b101000 @
b101000 ]
b101000 {
b101100 &
b101100 (
b101100 *
b101100 5
b101100 y
b101100 &"
1#
#440000
0#
#450000
b110000 &
b110000 (
b110000 *
b110000 5
b110000 y
b110000 &"
b101100 @
b101100 ]
b101100 {
1#
#460000
0#
#470000
b110000 @
b110000 ]
b110000 {
b110100 &
b110100 (
b110100 *
b110100 5
b110100 y
b110100 &"
1#
#480000
0#
#490000
b111000 &
b111000 (
b111000 *
b111000 5
b111000 y
b111000 &"
b110100 @
b110100 ]
b110100 {
1#
#500000
0#
#510000
b111000 @
b111000 ]
b111000 {
b111100 &
b111100 (
b111100 *
b111100 5
b111100 y
b111100 &"
1#
#520000
0#
#530000
b1000000 &
b1000000 (
b1000000 *
b1000000 5
b1000000 y
b1000000 &"
b111100 @
b111100 ]
b111100 {
1#
#540000
0#
#550000
b1000000 @
b1000000 ]
b1000000 {
b1000100 &
b1000100 (
b1000100 *
b1000100 5
b1000100 y
b1000100 &"
1#
#560000
0#
#570000
b1001000 &
b1001000 (
b1001000 *
b1001000 5
b1001000 y
b1001000 &"
b1000100 @
b1000100 ]
b1000100 {
1#
#580000
0#
#590000
b1001000 @
b1001000 ]
b1001000 {
b1001100 &
b1001100 (
b1001100 *
b1001100 5
b1001100 y
b1001100 &"
1#
#600000
0#
#610000
b1010000 &
b1010000 (
b1010000 *
b1010000 5
b1010000 y
b1010000 &"
b1001100 @
b1001100 ]
b1001100 {
1#
#620000
0#
#630000
b1010000 @
b1010000 ]
b1010000 {
b1010100 &
b1010100 (
b1010100 *
b1010100 5
b1010100 y
b1010100 &"
1#
#640000
0#
#650000
b1011000 &
b1011000 (
b1011000 *
b1011000 5
b1011000 y
b1011000 &"
b1010100 @
b1010100 ]
b1010100 {
1#
#660000
0#
#670000
b1011000 @
b1011000 ]
b1011000 {
b1011100 &
b1011100 (
b1011100 *
b1011100 5
b1011100 y
b1011100 &"
1#
#680000
0#
#690000
b1100000 &
b1100000 (
b1100000 *
b1100000 5
b1100000 y
b1100000 &"
b1011100 @
b1011100 ]
b1011100 {
1#
#700000
0#
#710000
b1100000 @
b1100000 ]
b1100000 {
b1100100 &
b1100100 (
b1100100 *
b1100100 5
b1100100 y
b1100100 &"
1#
#720000
0#
#730000
b1101000 &
b1101000 (
b1101000 *
b1101000 5
b1101000 y
b1101000 &"
b1100100 @
b1100100 ]
b1100100 {
1#
#740000
0#
#750000
b1101000 @
b1101000 ]
b1101000 {
b1101100 &
b1101100 (
b1101100 *
b1101100 5
b1101100 y
b1101100 &"
1#
#760000
0#
#770000
b1110000 &
b1110000 (
b1110000 *
b1110000 5
b1110000 y
b1110000 &"
b1101100 @
b1101100 ]
b1101100 {
1#
#780000
0#
#790000
b1110000 @
b1110000 ]
b1110000 {
b1110100 &
b1110100 (
b1110100 *
b1110100 5
b1110100 y
b1110100 &"
1#
#800000
0#
#810000
b1111000 &
b1111000 (
b1111000 *
b1111000 5
b1111000 y
b1111000 &"
b1110100 @
b1110100 ]
b1110100 {
1#
#820000
0#
#830000
b1111000 @
b1111000 ]
b1111000 {
b1111100 &
b1111100 (
b1111100 *
b1111100 5
b1111100 y
b1111100 &"
1#
#840000
0#
#850000
b10000000 &
b10000000 (
b10000000 *
b10000000 5
b10000000 y
b10000000 &"
b1111100 @
b1111100 ]
b1111100 {
1#
#860000
0#
#870000
b10000000 @
b10000000 ]
b10000000 {
b10000100 &
b10000100 (
b10000100 *
b10000100 5
b10000100 y
b10000100 &"
1#
#880000
0#
#890000
b10001000 &
b10001000 (
b10001000 *
b10001000 5
b10001000 y
b10001000 &"
b10000100 @
b10000100 ]
b10000100 {
1#
#900000
0#
#910000
b10001000 @
b10001000 ]
b10001000 {
b10001100 &
b10001100 (
b10001100 *
b10001100 5
b10001100 y
b10001100 &"
1#
#920000
0#
#930000
b10010000 &
b10010000 (
b10010000 *
b10010000 5
b10010000 y
b10010000 &"
b10001100 @
b10001100 ]
b10001100 {
1#
#940000
0#
#950000
b10010000 @
b10010000 ]
b10010000 {
b10010100 &
b10010100 (
b10010100 *
b10010100 5
b10010100 y
b10010100 &"
1#
#960000
0#
#970000
b10011000 &
b10011000 (
b10011000 *
b10011000 5
b10011000 y
b10011000 &"
b10010100 @
b10010100 ]
b10010100 {
1#
#980000
0#
#990000
b10011000 @
b10011000 ]
b10011000 {
b10011100 &
b10011100 (
b10011100 *
b10011100 5
b10011100 y
b10011100 &"
1#
#1000000
0#
#1010000
b10100000 &
b10100000 (
b10100000 *
b10100000 5
b10100000 y
b10100000 &"
b10011100 @
b10011100 ]
b10011100 {
1#
#1020000
0#
#1030000
b10100000 @
b10100000 ]
b10100000 {
b10100100 &
b10100100 (
b10100100 *
b10100100 5
b10100100 y
b10100100 &"
1#
#1040000
0#
#1050000
b10101000 &
b10101000 (
b10101000 *
b10101000 5
b10101000 y
b10101000 &"
b10100100 @
b10100100 ]
b10100100 {
1#
#1060000
0#
#1070000
b10101000 @
b10101000 ]
b10101000 {
b10101100 &
b10101100 (
b10101100 *
b10101100 5
b10101100 y
b10101100 &"
1#
#1080000
0#
#1090000
b10110000 &
b10110000 (
b10110000 *
b10110000 5
b10110000 y
b10110000 &"
b10101100 @
b10101100 ]
b10101100 {
1#
#1100000
0#
#1110000
b10110000 @
b10110000 ]
b10110000 {
b10110100 &
b10110100 (
b10110100 *
b10110100 5
b10110100 y
b10110100 &"
1#
#1120000
0#
#1130000
b10111000 &
b10111000 (
b10111000 *
b10111000 5
b10111000 y
b10111000 &"
b10110100 @
b10110100 ]
b10110100 {
1#
#1140000
0#
#1150000
b10111000 @
b10111000 ]
b10111000 {
b10111100 &
b10111100 (
b10111100 *
b10111100 5
b10111100 y
b10111100 &"
1#
#1160000
0#
#1170000
b11000000 &
b11000000 (
b11000000 *
b11000000 5
b11000000 y
b11000000 &"
b10111100 @
b10111100 ]
b10111100 {
1#
#1180000
0#
#1190000
b11000000 @
b11000000 ]
b11000000 {
b11000100 &
b11000100 (
b11000100 *
b11000100 5
b11000100 y
b11000100 &"
1#
